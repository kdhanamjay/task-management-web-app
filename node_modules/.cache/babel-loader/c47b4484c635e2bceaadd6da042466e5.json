{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../data.json\";\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: data.boards,\n  reducers: {\n    addBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: []\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: state => {\n      const board = state.find(board => board.isActive);\n      state.splice(state.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index ? board.isActive = true : board.isActive = false;\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        newColIndex\n      } = action.payload;\n      const task = {\n        title,\n        description,\n        subtasks,\n        status\n      };\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const {\n        colIndex,\n        prevColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    }\n  }\n});\nexport default boardsSlice;","map":{"version":3,"names":["createSlice","data","boardsSlice","name","initialState","boards","reducers","addBoard","state","action","isActive","length","payload","board","columns","newColumns","push","editBoard","find","deleteBoard","splice","indexOf","setBoardActive","map","index","addTask","title","status","description","subtasks","newColIndex","task","column","col","tasks","editTask","prevColIndex","taskIndex","filter","newCol","dragTask","colIndex","prevCol","i","setSubtaskCompleted","subtask","isCompleted","setTaskStatus","deleteTask"],"sources":["C:/Users/Amararajavidyalayam/Downloads/kanban-task-management-web-app/src/redux/boardsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport data from \"../data.json\";\n\nconst boardsSlice = createSlice({\n  name: \"boards\",\n  initialState: data.boards,\n  reducers: {\n    addBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: [],\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: (state) => {\n      const board = state.find((board) => board.isActive);\n      state.splice(state.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index\n          ? (board.isActive = true)\n          : (board.isActive = false);\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const { title, status, description, subtasks, newColIndex } =\n        action.payload;\n      const task = { title, description, subtasks, status };\n      const board = state.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex,\n      } = action.payload;\n      const board = state.find((board) => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const { colIndex, prevColIndex, taskIndex } = action.payload;\n      const board = state.find((board) => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find((board) => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    },\n  },\n});\n\nexport default boardsSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}